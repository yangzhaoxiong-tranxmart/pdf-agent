Research on automatic driving path optimization algorithm based on Frenet coordinate system and Cartesian coordinate system

Kaiaji Zhang

_School of Mechanical Engineering_

_Nanjing University of Science and Technology_

Nanjing, China

zhangkaiaji0319@163.com

Dejun Yin 1

_School of Mechanical Engineering_

_Nanjing University of Science and Technology_

Nanjing, China

xhkshs2000@163.com

###### Abstract

Under complex traffic conditions, autonomous driving has high requirements for the real-time and accuracy of path planning. Existing methods have shortcomings: the Frenet coordinate system simplifies calculations but is difficult to meet kinematic constraints, and the Cartesian coordinate system adapts to complex road conditions but is inefficient. To this end, this study proposes a dual-coordinate system collaborative path planning method, which first preliminarily solves the problem in the Frenet coordinate system and then optimizes it in the Cartesian coordinate system. Combining the gradient method with curve interpolation (GCI), the system considers kinematic constraints, dynamic obstacle avoidance, and trajectory smoothness, constructs an efficient iterative framework, and greatly improves the path planning performance.

 Autonomous driving Path Planning; Frenet; Cartesian; Gradient Curve Interpolation +
Footnote †: publicationid: pubid: 979-8-3315-1401-3/25/$31.00 ©2025 IEEE

## I Introduction

Autonomous driving technology has great potential in improving driving safety, comfort and efficiency, and the quality of trajectory planning is particularly critical[1]. Existing methods are divided into road driving planning and parking planning, which focus on smooth obstacle avoidance and precise parking respectively. However, the continuous change of complex road curvature puts higher requirements on trajectory planning, and it is difficult to take into account both kinematic constraints and real-time performance. Methods based on the Frenet coordinate system are often used to trajectory planning. For example, Huang Jing et al. decomposed the vehicle kinematic constraints through longitudinal and transverse polynomials, but their performance was limited under high curvature curves[2]. In contrast, methods based on the Cartesian coordinate system, such as Xu J, use virtual controllers to filter the trajectory generated by RRT, but their computational power is insufficient in modeling collision avoidance constraints[3]. To this end, this study proposes a trajectory planning method suitable for continuous curves. First, a safe path is generated by dynamic planning in the Frenet coordinate system to ensure the coverage of the feasible domain; then a multi-objective optimization function is constructed in the Cartesian coordinate system, the constraints are converted into gradient form for iterative optimization, and the path is smoothed by curve interpolation. This method reduces the dependence on the initial trajectory, solves the coordinate conversion problem in curve scenes, achieves global optimization, and significantly improves the autonomous driving capability in complex scenes.

## II Optimization Problem

### Vehicle Kinematics

This paper transforms these constraints into optimization objectives, thereby establishing an unconstrained optimization problem[4]. The complex road curvature optimization problem consists of vehicle kinematic constraints, boundary condition constraints, and obstacle avoidance constraints. The vehicle kinematic constraints are presented as[5]:

\[\begin{bmatrix}x_{v_{1 + 1}} \\ y_{v_{1 + 1}} \\ v_{v_{1 + 1}} \\ \phi_{v_{1 + 1}} \\ \theta_{v_{1 }} \\ \end{bmatrix}\begin{bmatrix}x_{v} \\ y_{v} \\ \end{bmatrix} + \Delta t \begin{bmatrix}v_{v} \cdot cos\theta_{v} \\ v_{v} \cdot sin\theta_{v} \\ a_{v} \\ \frac{v_{v} \cdot tan\theta_{v}}{L_{v}} \\ \end{bmatrix}\]

Wherein, Point P is the midpoint of the rear wheel axis, \(v\) is the velocity, \(a\) is the acceleration, _ph_ is the steering angle, _ph_ is the angular velocity, _th_ is the direction angle, and \(L_{v}\) is the wheelbase. Other geometric parameters such as \(L_{v}\) (front overhang length), _Ls_ (rear overhang length) and _Ls_ (width) are shown in Figure 1[6].

Fig. 1: Vehicle kinematics and geometric In path planning, the flexibility of curvature must meet the vehicle kinematic limits to ensure steering constraints. The maximum curvature constraint of vertex \(i\) is determined by the adjacent points \(i\) - 1, \(i\) and \(i\) + 1, and its tangent angle change can be expressed as:

\[\Delta\phi_{i} = \cos^{- \frac{1}{\Delta X_{i}^{T}\Delta X_{i+1}}}\]

\[\frac{\partial\kappa_{i}}{\partial\mathbf{x}_{i}} = - \frac{1}{\mid\Delta\mathbf{x}_{i}\mid}\frac{\partial\Delta\phi_{i}}{\partial\cos(\Delta\phi_{i})}\frac{\partial\cos(\Delta\phi_{i})}{\partial\mathbf{x}_{i}} - \frac{\Delta\phi_{i}}{\left(\Delta\mathbf{x}_{i}\right)^{2}}\frac{\partial\Delta\mathbf{x}_{i}}{\partial\mathbf{x}_{i}}\]

\[\frac{\partial\kappa_{i}}{\partial\mathbf{x}_{i+1}} = - \frac{1}{\mid\Delta\mathbf{x}_{i}\mid}\frac{\partial\Delta\phi_{i}}{\partial\cos(\Delta\phi_{i})}\frac{\partial\cos(\Delta\phi_{i})}{\partial\mathbf{x}_{i-1}} - \frac{\Delta\phi_{i}}{\left(\Delta\mathbf{x}_{i}\right)^{2}}\frac{\partial\Delta\mathbf{x}_{i}}{\partial\mathbf{x}_{i-1}}\]

\[\frac{\partial\kappa_{i}}{\partial\mathbf{x}_{i+1}} = - \frac{1}{\mid\Delta\mathbf{x}_{i}\mid}\frac{\partial\Delta\phi_{i}}{\partial\cos(\Delta\phi_{i})}\frac{\partial\cos(\Delta\phi_{i})}{\partial\mathbf{x}_{i+1}}\]

The curvature formula is: \(xi=(\Delta\,\partial i)/\mid\Delta\,\dot{Xi}\mid\), where \(\Delta\,\partial i\) is the change in tangent angle at vertex \(i\) , and \(\mid\Delta\,\dot{Xi}\mid\) is the displacement modulus between adjacent nodes. The curvature gradient can be obtained by differentiating the coordinates of nodes \(i\) - 1, \(i\) , and \(i\) + 1 to ensure that the path is smooth and meets kinematic constraints.

### _Constraints_

At this time, the curvature mutation constraint gradient can be presented:

\[\nabla f_{curvature}(X_{i}) = a(k_{i-1}-k_{max})\frac{\partial\kappa_{i}}{\partial\mathbf{x}_{i-1}} + b(k_{i}-k_{max})\frac{\partial\kappa_{i}}{\partial\mathbf{x}_{i-1}}\]

\[b(k_{i}-k_{max})\frac{\partial\kappa_{i}}{\partial\mathbf{x}_{i}} + c(k_{i+1}-k_{max})\frac{\partial\kappa_{i}}{\partial\mathbf{x}_{i+1}}\]

Among them, \(a\) , \(b\) , and \(c\) represent the distribution coefficients of the curvature changes of three adjacent points respectively.In path optimization, the ego vehicle is simplified into a rectangle, and a driving corridor is constructed along the reference path to ensure that the ego vehicle stays within the corridor to avoid collisions with obstacles and road boundaries.

\[x_{i}^{obj} \leq x_{i}^{obj} \leq x_{i}^{obj},\]

\[y_{i}^{obj} \leq y_{i}^{obj} \leq y_{i}^{obj},\]

\[j = 1,...,N.\]

Among them, \(x_{i}^{obj}\), \(x_{i}^{obj}\), \(y_{i}^{obj}\), \(y_{i}^{obj}\) are the upper and lower boundaries of the corridor.

As shown in Figure 2, for the ego vehicle, the rectangular body is evenly covered by N disks with the same radius\({}^{[7]}\), where (\(x_{i}^{obj}\), \(y_{i}^{obj}\)) represents the position of the center of the jth disk:

\[x_{i}^{ego} = x_{i} + \left(\frac{2j-1}{2N}\cdot(L_{R}+L_{W}+L_{F})-L_{R}\right) \cdot \cos\theta_{i},\]

\[y_{i}^{ego} = y_{i} + \left(\frac{2j-1}{2N}\cdot(L_{R}+L_{W}+L_{F})-L_{R}\right) \cdot sin\theta_{i},\]

\[j = 1,...,N\]

\[R^{ego} = \sqrt{(\frac{L_{R}+L_{W}+L_{F}}{2N})^{2}+(\frac{L_{R}}{2})^{2}}\]

Among them, \(R^{ego}\) represents the radius of each disk.

As shown in Figure 3, the geometric center of the obstacle is its coordinate center, and the derivation method is similar to that of the vehicle\({}^{[8]}\). Let the coordinates of the nearest obstacle be \(o_{k}=(x_{ki}^{obs},y_{i}^{obs})\) , and \((x_{i}^{obj},y_{i}^{obj})\) be the center position of the jth disk of the obstacle.

\[x_{k}^{obj} = x_{k}^{obs} + (j-2)\cdot \left(\frac{2j-1}{2N}\cdot L_{obs}+W_{obs}\right) \cdot cos\theta_{obs},\]

\[y_{k}^{obj} = y_{k}^{obs} + (j-2)\cdot \left(\frac{2j-1}{2N}\cdot L_{obs}+W_{obs}\right) \cdot sin\theta_{obs},\]

\[j = 1,...,N\]

\[R^{obs} = \sqrt{(\frac{L_{obs}}{2N})^{2}+(\frac{W_{obs}}{2})^{2}}\]

Among them, \(R^{obs}\) represents the radius of each obstacle disk.

Each iteration checks if the minimum distance between vehicle (\(x_{i}^{obj},y_{i}^{obj}\)) and obstacle (\(x_{i}^{obs},y_{i}^{obj}\)) envelope coordinates is less than the sum of their radii. If true, a collision risk is detected, activating the penalty term. The obstacle gradient is calculated to adjust the path, ensuring the vehicle avoids the obstacle:

\[\nabla f_{obs}(X_{i}) = 2(\mid X_{i}-o_{k}\mid-R^{obs}-R^{ego})\frac{X_{i}-o_{k}}{\mid X_{i}- o_{k}\mid}\]

Figure 3: Obstacle multi-circle envelope

Figure 2: Multi-circle envelope of the vehicle

In iterative optimization, road boundaries are detected via sensor fusion, and the distance between the vehicle and **boundary points is calculated**[9]. If this distance is less than the envelope radius, a collision risk triggers the penalty term, and the collision avoidance gradient is computed based on the nearest boundary point \(n\) :

\[\nabla f_{boundary}(X_{i}) = 2(\mid X_{i} - r_{k}\mid - R^{avg})\frac{X_{i} - r_{k}}{\mid X_{i} - r_{k}\mid}\]

The initial path is the optimal path rough solution calculated in the previous section. The path sequence is defined as \(Xl = (xi,y)\), where \(i \in [ 1,n\rbrack\). In each iteration, the gradient direction of the \(i - th\) point is expressed as:

\[\begin{array}{l} {g_{k}(X_{i}) = \alpha_{i}\nabla f_{boundary}(X_{i}) + \alpha_{i}\nabla f_{obs}(X_{i})} \\ {+ \alpha_{i}\nabla f_{boundary}(X_{i})} \\ \end{array}\]

Among them, \(\alpha_{1}\), \(\alpha_{2}\), \(\alpha_{3}\) are gradient direction weights, \(\nabla f_{boundary}(X_{i})\), \(\nabla f_{obs}(X_{i})\), \(\nabla f_{boundary}(X_{i})\) are curvature constraint, obstacle avoidance and boundary avoidance gradients respectively.

### _Curve Interpolation_

Traditional interpolation methods cannot guarantee curvature continuity, which may cause vehicle jitter and unstable control. Cubic curve interpolation generates smooth and efficient driving trajectories through second-order derivative continuity and precise boundary control, improving safety and comfort[10].

A **cubic polynomial** in the given interval \(\left[ {s_{i},S_{i} + 1} \right\rbrack\):

\[\begin{array}{l} {l(s) = l_{i} + dl_{i}\Delta s + \frac{ddl_{i}}{2}\Delta s^{2} + \frac{ddl_{i+1} - ddl_{i}}{6}\Delta s^{3}} \\ {l(s) = dl_{i} + ddl_{i}\Delta s + \frac{ddl_{i+1} - ddl_{i}}{2\hbar}\Delta s^{2}} \\ {l^{\prime}(s) = ddl_{i} + \frac{ddl_{i+1} - ddl_{i}}{h}\Delta s} \\ \end{array}\]

In order to meet the requirements of real-time and densely spaced autonomous driving scenarios, a segmented jerk optimization method is used, that is, the calculation of \(l^{\prime}(s)\) is described by linearly approximating the acceleration change, and the accuracy of \(l^{\prime}(s)\) is maintained, so that \(l(s)\) can be rewritten as:

\[l(s) = l_{i} + dl_{i}\Delta s + \left( \frac{ddl_{i}}{3} + \frac{ddl_{i+1}}{6} \right)\Delta s^{2}\]

Where \(h = S_{i} + 1 - S_{i}\), \(\Delta s = s - s_{i}\), and \(l_{i}\), \(dl_{i}\), \(ddl_{i}\) define the initial state (position, velocity, acceleration) of the path segment respectively.

## III Simulation Analysis

This study verifies the proposed path planning method through the MATLAB simulation platform. The experimental design adopts a composite road scene containing continuous straight roads and curves, and sets static and dynamic obstacles in it. The specific experimental parameter configuration is shown in Table 1.

This study compares two path planning methods: GCI and Frenet-QP. Both generate the initial path through dynamic programming, then construct a quadratic programming problem and optimize it using the OSQP solver.

\begin{table}
\begin{tabular}{|c|c|c|} \hline Parameter & Mean & Value \\ \hline \(L_{\pi}\) & Wheelbase & 2.80m \\ \hline \(L_{s}\) & Vehicle width & 1.942m \\ \hline \(L_{r}\) & Front overhang length & 0.96m \\ \hline \(L_{\pi}\) & Rear overhang length & 0.929m \\ \hline \(\alpha_{i}\) & Curvature Weight & 2.8 \\ \hline \(\alpha_{i}\) & Obstacle Weight & 0.01 \\ \hline \(\alpha_{i}\) & Boundary Weight & 0.01 \\ \hline \(iter_{max}\) & Maximum iterations & 1000 \\ \hline \(N\) & Enveloping circles & 3 \\ \hline \(T\) & Planning duration & 10s \\ \hline \end{tabular}
\end{table} TABLE I: Main Parameters of Iterative optimization based on GCIAs shown in Figure 4, the QP method is constrained by the Frenet framework, resulting in vector distortion and curvature violations in high-curvature areas (Figure 5a). In contrast, the GCI method uses dual coordinate system optimization to strictly enforce curvature constraints (Figure 5b), achieving smoother curvature, better kinematic adaptability, and reduced collision risk.

As shown in Figure 6, the GCI method is more efficient than the quadratic programming method, solving a single-frame path in 0.0068 seconds versus 0.0139 seconds, by avoiding matrix inversion through iterative optimization.

## IV Conclusions

This study proposes a dual-coordinate trajectory planning method combining the strengths of Frenet and Cartesian systems. It generates an initial solution in the Frenet system and optimizes it with gradient interpolation in the Cartesian system, ensuring smoothness and kinematic constraints. Experiments show this method effectively handles continuous curvature changes, avoids distortion from traditional transformations, and improves computational efficiency while ensuring obstacle avoidance and accuracy, offering a reliable solution for autonomous driving.

## Acknowledgment

This article represents a phased accomplishment within the framework of the National Natural Science Foundation of China General Program titled "Road Friction Coefficient Estimation for Each Wheel Based on Multi Degree of Freedom Data Fusion and Torque Control Method" (52272398).

## References

* [1] Cheng Z , Zeng X , Fang H , et al.Hierarchical MPC-based Motion Planning for Automated Vehicles in Parallel Autonomy(J)[J.Unmanned Systems, 2024, 12(4):DOI:10.1142/S2301385024500286.
* [2] Liu L S , Lin J F , Yao J X, et al.Path Planning for Smart Car Based on Dijkstra Algorithm and Dynamic Window Approach(J)[J.Wireless Comm unications and Mobile Computing, 2021.DOI:10.1155/2021/881864.
* [3] Xu J , Park K S .Kinematic performance-based path planning for cable-d riven parallel robots using modified adaptive RRT*[J].Microsystem Tec Inhologies, 2022, 28(10):120.1007:00542-022-05319-3.
* [4] Leng B An Optimized Trajectory Planner and Motion Controller Frame work for Autonomous Driving in Unstructured Environments[J].Sensors, 2021, 2021.DOI:10.3390/s2134409.
* [5] Li B , Zhang Y , Fast Trajectory Planning in Cartesian rather than Frenet Frame: A Precise Solution for Autonomous Driving in Complex Urban S canaris[J].IFAC-PapersOnLine, 2020, 53(2):17065-17070.DOI:10.1016 /j.ifacol.2020.12.1549.
* [6] Zeng D, Yu Z , Xiong L , et al.Driving-behavior-oriented trajectory plan ring for autonomous vehicle driving on urban structural road[J].Jnl of A automobile Engineering: Part D, 2021, 235(4):21.DOI:10.1177/09544070 20969992.
* [7] Li H , Wu C , Chu D, et al.Combined Trajectory Planning and Tracking for Autonomous Vehicle Considering Driving Styles[J].Quality Control, Transactions, 2021, 9(1):9453-9463.
* [8] Li B , Shao Z .A unified motion planning method for parking an automo vchicle in the presence of irregularly placed obstacles[J].Knowled ge-Based Systems, 2015, 86:11-20.DOI:10.1016/j.knosys.2015.04.016.
* [9] Chen Z , Liu Y , Liu Y , et al.Dynamic Lane-Changing Trajectory Planner ng for Autonomous Vehicles Based on Discrete Global Trajectory[J].IE EE Transactions on Intelligent Transportation Systems, 2021.DOI:10.11 09/TITS.2021.3083541.
* [10] Yang L , Lu C , Xiong G M , et al.A Hybrid Motion Planning Framework for Autonomous Driving in Mixed Traffic Flow[J].Green Energy and In telligent Transportation, 2022.DOI:10.1016/j.geits.2022.100022.

Figure 4: Comparison of various optimization methods

Figure 5: Geometric property comparison

Figure 6: Comparison of optimized calculation time